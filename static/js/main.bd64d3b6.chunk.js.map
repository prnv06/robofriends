{"version":3,"sources":["Components/Card.js","Components/CardList.js","robots.js","Components/SearchBox.js","Components/scroll.js","Containers/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","name","email","CardList","robots","map","user","i","key","id","username","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2KAceA,G,MAZF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAK,SAASC,IAAK,kDACxB,6BACC,4BAAKH,EAAMI,MACX,2BAAIJ,EAAMK,W,4BCUCC,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACC,6BAEGA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAAMC,IAAOD,EAAGE,GAAKL,EAAOG,GAAGE,GAAIR,KAAQG,EAAOG,GAAGN,KAAMC,MAASE,EAAOG,GAAGL,aCVxEE,EAAS,CACpB,CACEK,GAAI,EACJR,KAAM,gBACNS,SAAU,OACVR,MAAO,qBAET,CACEO,GAAI,EACJR,KAAM,eACNS,SAAU,YACVR,MAAO,qBAET,CACEO,GAAI,EACJR,KAAM,mBACNS,SAAU,WACVR,MAAO,sBAET,CACEO,GAAI,EACJR,KAAM,mBACNS,SAAU,WACVR,MAAO,6BAET,CACEO,GAAI,EACJR,KAAM,mBACNS,SAAU,SACVR,MAAO,4BAET,CACEO,GAAI,EACJR,KAAM,uBACNS,SAAU,mBACVR,MAAO,2BAET,CACEO,GAAI,EACJR,KAAM,kBACNS,SAAU,eACVR,MAAO,0BAET,CACEO,GAAI,EACJR,KAAM,2BACNS,SAAU,gBACVR,MAAO,wBAET,CACEO,GAAI,EACJR,KAAM,kBACNS,SAAU,WACVR,MAAO,2BAET,CACEO,GAAI,GACJR,KAAM,qBACNS,SAAU,iBACVR,MAAO,2BCjDIS,EARG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACA,yBAAKf,UAAY,OAChB,2BAAOA,UAAY,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAYH,MCK/FI,EARA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnExB,EAAMyB,WCiBKC,E,kDAlBd,WAAY1B,GAAQ,IAAD,8BAClB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,GAAGG,KAAKJ,MAAMC,SACb,OAAO,2D,GAdkBK,aC2CbC,E,kDApCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACZpB,OAAO,GACP8B,YAAa,IAJD,E,gEAQO,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACzB,OAAQA,S,+BAO9B,IAAD,OACFsC,EAAiBd,KAAKJ,MAAMpB,OAAOuC,QAAO,SAAAvC,GAC/C,OAAOA,EAAOH,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAElE,OACC,yBAAK9C,UAAW,MACf,2CACA,kBAAC,EAAD,CAAWe,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAQsC,W,GA9BLZ,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.bd64d3b6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt ='robots' src={'https://robohash.org/happy${props.id}?200*200'} />\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n\treturn (\n\t\t<div>\n\t\t{\n  \t\t\trobots.map((user,i) => {\n  \t\t\t\treturn (\n  \t\t\t\t\t<Card key = {i} id ={robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\n  \t\t\t\t)\n  \t\t\t})\n\t\t}\n  \t\t</div>\n\t);\n}\n\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\nconst SearchBox = ({searchField,searchChange}) => {\n\treturn (\n\t<div className = 'pa2'>\n\t\t<input className = 'pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange = {searchChange}/>\n\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '650px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>Ooops. This is not good</h1>\n\t\t}\n\t}\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../Components/CardList';\nimport { robots } from '../robots';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/scroll';\nimport ErrorBoundary from './ErrorBoundary.js';\n\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots:[],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=> response.json())\n\t\t\t.then(users => this.setState({robots: robots}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\treturn (\n\t\t\t<div className ='tc'>\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Components/Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}